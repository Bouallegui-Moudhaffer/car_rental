name: CI

permissions:
  contents: read        # keep code read-only
  issues: write         # allow creating/updating GitHub Issues

on:
  pull_request:

jobs:
  lint-test-bandit:
    name: Lint, Test & Bandit
    runs-on: ubuntu-latest

    # bring up MySQL 5.7 with your init SQL
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: car_rental
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential default-libmysqlclient-dev mysql-client

      - name: Install Python deps + dev tools
        run: |
          pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install flake8 pytest bandit

      - name: Lint with flake8
        run: flake8 --config .flake8 app

      - name: Wait for MySQL & load schema
        run: |
          echo "Waiting for MySQL at 127.0.0.1:3306 (TCP)…"
          until mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            echo "  still waiting…"
            sleep 5
          done

          echo "Loading schema…"
          mysql   -h 127.0.0.1 -P 3306 \
                  -u root -proot \
                  car_rental < db/car_rental_db.sql




      - name: Run pytest
        # add this so `import app.main` will find your app/ directory
        env:
          PYTHONPATH: ${{ github.workspace }}
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: car_rental
          MAIL_SERVER: mailhog
          MAIL_PORT: 1025
          MASTER_PASSWORD: REAPER
          SECRET_KEY: testsecretkey0123456789abcdef
        run: pytest --maxfail=1 --disable-warnings -q


  zap_baseline:
    name: OWASP ZAP Baseline Scan
    needs: lint-test-bandit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Bring up DB service
        run: |
          docker compose up -d db

      - name: Wait for MySQL (127.0.0.1:3306) before starting web
        run: |
          sudo apt-get update && sudo apt-get install -y mysql-client
          echo "⏳ Waiting for MySQL at 127.0.0.1:3306…"
          until mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            echo "  still waiting…"
            sleep 5
          done

      - name: Bring up web & MailHog
        run: |
          docker compose up -d web mailhog

      - name: Wait for web to be ready on 127.0.0.1:5000
        run: |
          echo "⏳ Waiting for Flask to start at http://127.0.0.1:5000 …"
          for i in {1..12}; do
            if curl -sSf http://127.0.0.1:5000/ >/dev/null; then
              echo "✅ Flask is up!"
              exit 0
            fi
            echo "…still waiting (attempt $i/12)…"
            sleep 5
          done
          echo "❌ Timed out waiting for Flask!"
          exit 1

      - name: Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://127.0.0.1:5000'
          # point at the new GHCR stable image
          image: 'ghcr.io/zaproxy/zaproxy:stable'
          cmd_options: >-
            -r report_html.html \
            -r zap-report.html

      - name: Upload ZAP report artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  sonarcloud-scan:
    name: SonarCloud SAST
    runs-on: ubuntu-latest
    needs: zap_baseline

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@v1.10    # pin to latest stable
        with:
          organization: ${{ secrets.SONAR_ORG }}             # your SonarCloud org key
          projectKey: car_rental
          projectName: "Car Rental Service"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}            # must be passed as ENV





          
